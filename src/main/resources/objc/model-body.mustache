{{#models}}
{{#model}}
#import "{{classname}}.h"

@implementation {{classname}}

{{#vars}}
@synthesize {{name}} = _{{name}};
{{/vars}}

- (id) {{#vars}}{{name}}: ({{datatype}}) {{name}}
       {{/vars}}
       {
          {{#vars}}_{{name}} = {{name}};
          {{/vars}}

	        return self;
       }

- (id) initWithValues: (NSDictionary*)dict
{
    {{#vars}}
    {{#isPrimitiveType}}_{{name}} = [dict objectForKey:@"{{baseName}}"];
    {{/isPrimitiveType}}
    {{#complexType}}
    id {{name}}_dict = [dict objectForKey:@"{{name}}"];
    if([{{name}}_dict isKindOfClass:[NSArray class]]){
        if([{{name}}_dict count] > 0) {
            NSMutableArray * objs = [[NSMutableArray alloc] initWithCapacity:[{{name}}_dict count]];
            for (NSDictionary* dict in {{name}}_dict) {
                {{{complexType}}}* d = [[{{{complexType}}} alloc]initWithValues:dict];
                [objs addObject:d];
            }
            _{{{name}}} = [[NSArray alloc] initWithArray:objs];
        }
		}
    else {
        _{{name}} = [[{{complexType}} alloc]initWithValues:{{name}}_dict];
    }
    {{/complexType}}
    {{/vars}}

    return self;
}
{{/model}}
@end
{{/models}}
