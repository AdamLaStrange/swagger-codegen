{{#operations}}
#import "{{classname}}.h"
{{#imports}}#import "{{import}}.h"
{{/imports}}
{{newline}}


@implementation {{classname}}
static NSString * basePath = @"{{basePath}}";

@synthesize queue = _queue;
@synthesize api = _api;

- (id) init {
    [super init];
    _queue = [[NSOperationQueue alloc] init];
    _api = [[ApiInvoker alloc] init];

    return self;
}

-(void) addHeader:(NSString*) value
           forKey:(NSString*)key {
    [_api addHeader:value forKey:key];
}

{{#operation}}
-(void) {{nickname}}WithCompletionBlock {{^allParams}}:{{/allParams}}{{#allParams}}{{#secondaryParam}} {{paramName}}{{/secondaryParam}}:({{{dataType}}}) {{paramName}} {{#hasMore}}{{newline}}{{/hasMore}}{{/allParams}}{{newline}}
        {{#returnBaseType}}completionHandler:(void (^)({{returnType}}, NSError *))completionBlock{{/returnBaseType}}
        {{^returnBaseType}}completionHandler:(void (^)(NSError *))completionBlock{{/returnBaseType}} {

    NSMutableString* requestUrl = [NSMutableString stringWithFormat:@"%@{{path}}", basePath];

    // remove format in URL
    [requestUrl replaceCharactersInRange: [requestUrl rangeOfString:@".{format}"] withString:@".json"];
    {{#pathParams}}[requestUrl replaceCharactersInRange: [requestUrl rangeOfString:[NSString stringWithFormat:@"%@%@%@", @"{", @"{{baseName}}", @"}"]] withString: [_api escapeString:{{paramName}}]];
    {{/pathParams}}

		NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    {{#queryParams}}if({{paramName}} != nil)
        [queryParams setValue:{{paramName}} forKey:@"{{baseName}}"];
    {{/queryParams}}
		NSMutableDictionary* headerParams = [[NSMutableDictionary alloc] init];
    {{#headerParams}}if({{paramName}} != nil)
        [headerParams setValue:{{paramName}} forKey:@"{{baseName}}"];
    {{/headerParams}}

    NSDictionary* bodyDictionary = nil;
		{{#bodyParam}}
    if(body != nil && [body isKindOfClass:[NSArray class]]){
        NSMutableArray * objs = [[NSMutableArray alloc] init];
        for (id dict in body) {
            if([dict respondsToSelector:@selector(asDictionary:)]) {
                [objs addObject:[dict asDictionary]];
            }
            else{
                [objs addObject:dict];
            }
        }
        bodyDictionary = objs;
    }
    else if([body respondsToSelector:@selector(asDictionary)]) {
        bodyDictionary = [body asDictionary];
    }
    else{
        NSLog(@"don't know what to do with %@", body);
    }

    {{/bodyParam}}
    
    {{#requiredParamCount}}
    {{#requiredParams}}
    if({{paramName}} == nil) {
        // error
    }
    {{/requiredParams}}
    {{/requiredParamCount}}

    [_api invokeWithCompletionBlock: requestUrl 
                             method: @"{{httpMethod}}" 
                        queryParams: queryParams 
                               body: bodyDictionary 
                       headerParams: headerParams
                  completionHandler: ^(NSDictionary *data, NSError *error) {
        if (error) {
            {{#returnBaseType}}completionBlock(nil, error);{{/returnBaseType}}
            {{^returnBaseType}}completionBlock(error);{{/returnBaseType}}
            return;
        }
        
        {{#returnBaseType}}
        {{#returnContainer}}
        if([data isKindOfClass:[NSArray class]]){
            NSMutableArray * objs = [[NSMutableArray alloc] initWithCapacity:[data count]];
            for (NSDictionary* dict in data) {
                {{{returnBaseType}}}* d = [[{{{returnBaseType}}} alloc]initWithValues: dict];
                [objs addObject:d];
            }
            completionBlock(objs, nil);
        }
        {{/returnContainer}}
        {{#returnSimpleType}}
        {{#returnBaseType}}completionBlock( [[{{returnBaseType}} alloc]initWithValues: data], nil);{{/returnBaseType}}
        {{/returnSimpleType}}
        {{/returnBaseType}}
        
        {{^returnBaseType}}completionBlock(nil);{{/returnBaseType}}{{newline}}
    }];
}

{{newline}}
-({{returnType}}) {{nickname}} {{#allParams}}{{#secondaryParam}}{{paramName}}{{/secondaryParam}}:({{{dataType}}}) {{paramName}}
    {{/allParams}} {
    NSMutableString* requestUrl = [NSMutableString stringWithFormat:@"%@{{path}}?", basePath];

    // remove format in URL
    [requestUrl replaceCharactersInRange: [requestUrl rangeOfString:@".{format}"] withString:@".json"];
    {{#pathParams}}[requestUrl replaceCharactersInRange: [requestUrl rangeOfString:[NSString stringWithFormat:@"%@%@%@", @"{", @"{{baseName}}", @"}"]] withString:{{paramName}}];
    {{/pathParams}}

    {{#requiredParamCount}}
    {{#requiredParams}}
    if({{paramName}} == nil) {
        // error
    }
    {{/requiredParams}}
    {{/requiredParamCount}}

    {{#queryParams}}
    if({{paramName}} != nil) [requestUrl appendString:[NSString stringWithFormat:@"{{paramName}}=%@", {{paramName}}]];
    {{/queryParams}}

    NSError* error = nil;
    NSURLResponse* response = nil;
    NSMutableURLRequest* request = [[[NSMutableURLRequest alloc] init] autorelease];
    
    NSURL* URL = [NSURL URLWithString:requestUrl];
    [request setURL:URL];
    [request setCachePolicy:NSURLRequestReloadIgnoringLocalCacheData];
    [request setTimeoutInterval:30];
    
    NSData* data = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
    
    if (error) {
        NSLog(@"Error performing request %@", requestUrl);
        {{#returnBaseType}}return 0;
    {{/returnBaseType}}
    }
    {{#returnBaseType}}
    NSString* jsonString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];    
    id results = [jsonString objectFromJSONString];

    {{#returnContainer}}
    if([results isKindOfClass:[NSArray class]]){
        NSMutableArray * objs = [[NSMutableArray alloc] initWithCapacity:[results count]];
        for (NSDictionary* dict in results) {
            {{{returnBaseType}}}* d = [[{{{returnBaseType}}} alloc]initWithValues: dict];
            [objs addObject:d];
        }
        return objs;
    }
    {{/returnContainer}}
    {{#returnSimpleType}}
    return [[{{returnBaseType}} alloc]initWithValues: results];
    {{/returnSimpleType}}
    {{/returnBaseType}}
    {{^returnBaseType}}
    return;
    {{/returnBaseType}}
{{newline}}
}
{{/operation}}
{{newline}}
{{/operations}}
@end