{{#models}}

{{#model}}
class {{classname}}
  attr_accessor {{#vars}}:{{{name}}}{{#hasMore}}, {{/hasMore}}{{/vars}}{{newline}}
  # :internal => :external
  def self.attribute_map
  {
      {{#vars}}
      :{{{name}}} => :{{{baseName}}}{{#hasMore}}, {{/hasMore}}
      {{/vars}}{{newline}}
  }
  end

  def initialize(attributes = {})
    # Morph attribute keys into undescored rubyish style
    if attributes.to_s != ""
      {{classname}}.attribute_map.each_pair do |internal, external|
        if attributes.has_key? external.to_s
          attributes[internal.to_s] = attributes.delete(external.to_s)
        end
      end

      # Assign attributes
      attributes.each do |name, value|
        send("#{name}=", value) if self.respond_to?(name.to_sym)
      end
    end
  end

  def to_body
    body = {}
    {{classname}}.attribute_map.each_pair do |key,value|
      body[value] = self.send(key) unless self.send(key).nil?
    end
    body
  end
end
{{/model}}
{{/models}}